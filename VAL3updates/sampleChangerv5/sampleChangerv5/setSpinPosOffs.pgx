<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="setSpinPosOffs">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="inputMessage" type="string" xsi:type="element" />
      <Parameter name="sio_ID" type="num" xsi:type="element" />
    </Parameters>
    <Locals>
      <Local name="isNumber" type="bool" xsi:type="array" size="6" />
      <Local name="isOK" type="bool" xsi:type="array" size="1" />
      <Local name="msgLength" type="num" xsi:type="array" size="1" />
      <Local name="reply" type="string" xsi:type="array" size="1" />
      <Local name="rxMsgIndex" type="num" xsi:type="array" size="1" />
      <Local name="ryMsgIndex" type="num" xsi:type="array" size="1" />
      <Local name="rzMsgIndex" type="num" xsi:type="array" size="1" />
      <Local name="spinnerPosPnt" type="pointRx" xsi:type="array" size="1" />
      <Local name="xMsgIndex" type="num" xsi:type="array" size="1" />
      <Local name="yMsgIndex" type="num" xsi:type="array" size="1" />
      <Local name="zMsgIndex" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  //**************************************************
  // Method to set the coordinates of currentSpinPosj (current spinner position).
  // Messages take the form:
  //     setSpinPos:#X1#Y2#Z3#
  // Coordinate system starts at robot world frame origin (e.g. X=0, Y=0, Z=0)
  //
  // N.B. This version only translates the spinner position. 
  //      Rotations are not currently (16.02.2020) needed.
  //**************************************************

  // To start with the function is assumed working and we print the input
  isOK=true
  putln("Setting spinner coordinates:")
  putln("   "+inputMessage)

  // Find the where the coordinates are being supplied
  xMsgIndex=find(inputMessage,"#X")
  yMsgIndex=find(inputMessage,"#Y")
  zMsgIndex=find(inputMessage,"#Z")
  msgLength=len(inputMessage)

  // Extract the numSpinPos from the message and convert string to number
  toNum(mid(inputMessage,(yMsgIndex-(xMsgIndex+2)),(xMsgIndex+2)),numSpinOffs[0],isNumber[0])
  toNum(mid(inputMessage,(zMsgIndex-(yMsgIndex+2)),(yMsgIndex+2)),numSpinOffs[1],isNumber[1])
  toNum(mid(inputMessage,(msgLength-(zMsgIndex+2)),(zMsgIndex+2)),numSpinOffs[2],isNumber[2])


  // Check conversion to number successful and print to screen
  isOK=isOK and isNumber[0] and isNumber[1] and isNumber[2]
  if isNumber[0]==false
    reply="setSpinPosOffset:fail_'Invalid X'"
    put("Failed setting X. Found: ")
    putln(right(inputMessage,(yMsgIndex-(xMsgIndex+2))))
  elseIf isNumber[1]==false
    reply="setSpinPosOffset:fail_'Invalid Y'"
    put("Failed setting Y. Found: ")
    putln(right(inputMessage,(zMsgIndex-(yMsgIndex+2))))
  elseIf isNumber[2]==false
    reply="setSpinPosOffset:fail_'Invalid Z'"
    put("Failed setting Z. Found: ")
    putln(right(inputMessage,(rxMsgIndex-(zMsgIndex+2))))
  endIf

  // Assuming we got the numbers, now we create our new joint coordinate
  if isOK==true
    put("SpinPosOffset: dX=")
    put(numSpinOffs[0])
    put(" dY=")
    put(numSpinOffs[1])
    put(" dZ=")
    putln(numSpinOffs[2])

    spinnerPosPnt=compose(jointToPoint(flange,world,spinnerHomePos),world,{numSpinOffs[0],numSpinOffs[1],numSpinOffs[2],0,0,0})
    isOK=pointToJoint(flange,spinnerHomePos,spinnerPosPnt,currentSpinPosJ)
    // We are using a joint arrangement in spinnerPosition from before v5 because it worked!
    
    // Update knownPositions collection
    knownPositions["currentSpinPos"] = currentSpinPosJ

    if isOK==true
      reply="setSpinPosOffset:done"
    else
      reply="setSpinPosOffset:fail_'Could not convert position to joint'"
      putln("Failed converting position to joint")
    endIf
  endIf

  taskCreate "sendStatus",10,sendStatus(reply,sio_ID)
  taskKill("setSpinPosOff")
end]]></Code>
  </Program>
</Programs>