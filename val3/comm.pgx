<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="comm">
    <Locals>
      <Local name="asciiMessage" type="num" xsi:type="array" size="64" />
      <Local name="command" type="string" xsi:type="array" size="1" />
      <Local name="gripState" type="string" xsi:type="array" size="1" />
      <Local name="nchars" type="num" xsi:type="array" size="1" />
      <Local name="reply" type="string" xsi:type="array" size="1" />
      <Local name="sio_ID" type="num" xsi:type="array" size="1" />
      <Local name="stringMessage" type="string" xsi:type="array" size="1" />
      <Local name="stringPos" type="num" xsi:type="array" size="1" />
      <Local name="waitForMessage" type="bool" xsi:type="array" size="1" />
      <Local name="msgLength" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  put("Starting sampleChangerV5.1...")
  //Disconnect running sessions
  clearBuffer(sioASCII)
  // We initialise the current sample position as the homePosition for safety's sake!
  currentSamPosJ=homePosition
  stringMessage=""
  reply=""
  msgLength=0

  // Populate the collection of known positions
  knownPositions["binPosition"] = binPosition
  knownPositions["currentSamPos"] = currentSamPosJ
  knownPositions["currentSpinPos"] = currentSpinPosJ
  knownPositions["gatePosition"] = gatePosition
  knownPositions["homePosition"] = homePosition
  knownPositions["parkingPosition"] = parkingPosition
  knownPositions["spinnerHomePos"] = spinnerHomePos
  knownPositions["zeroPosition"] = zeroPosition
  
  userPage()
  cls()
  
  putln("sampleChangerV5.1 server started.")
  putln("Waiting for command...")

  // Provides the server-like behaviour
  while true

    // The next while loop handles receiving messages.
    // The only way out is to recieve a message terminated with a ;
    waitForMessage=true
    while waitForMessage
      // The sioASCII socket allows two connections. We need to check which has something it it
      // Read recv buffer & place ASCII values in asciiMessage
      nchars=sioGet(sioASCII[0],asciiMessage)
      if nchars>0
        sio_ID=0
      else
        nchars=sioGet(sioASCII[1],asciiMessage)
        if nchars>0
          sio_ID=1
        else
        endIf
      endIf
      // Useful for debugging how many chars were received by the server
      //put("nchars: ")
      //putln(nchars)

      // sioGet returns a ASCII bytes. We need to decode them.
      if nchars>0
        stringMessage=chr(asciiMessage[0])
        for stringPos=1 to 63
          stringMessage=stringMessage+chr(asciiMessage[stringPos])
        endFor
        // We are finished with asciiMessage. Clear it
        for stringPos=0 to 63
          asciiMessage[stringPos]=0
        endFor

        // Check the last character in the message was a message end char (;)
        // If not, inform the sender and don't do anything
        if right(stringMessage,1)==";"
          stringMessage=left(stringMessage,len(stringMessage)-1)
          waitForMessage=false
        else
          call sendStatus(":fail_'No message end'",sio_ID)
          stringMessage=""
        endIf
        // Useful for debugging what was received by the server
        //put("stringMessage: ")
        //putln(stringMessage)
      endIf
    endWhile


    // All incoming messages should be of the form:
    //   command[:parameters]
    // Trim off the parameters for the switch statement
    stringPos=find(stringMessage,":")
    if stringPos>0
      command=left(stringMessage,stringPos)
    else
      command=stringMessage
    endIf
    put("Command: ")
    putln(command)

    //Now decide how to handle the message
    switch command
      // Testing routines
      // **********
      case "hello"
        call sendStatus("world",sio_ID)
      break

      case "test"
        call test()
      break

      // Control routines
      // **********
      case "setSamPosOffset"
        taskCreate "setSamPosOffset",10,setSamPosOffs(stringMessage,sio_ID)
        wait(taskStatus("setSamPosOffset")==-1)
      break

      case "getSamPosOffset"
        reply="getSamPosOffset:#X"+toString(".3",numSamOffs[0])
        reply=reply+"#Y"+toString(".3",numSamOffs[1])
        call sendStatus(reply,sio_ID)
      break

      case "setSpinPosOffset"
        taskCreate "setSpinPosOff",10,setSpinPosOffs(stringMessage,sio_ID)
        wait(taskStatus("setSpinPosOff")==-1)
      break

      case "getSpinPosOffset"
        reply="getSpinPosOffset:#X"+toString(".3",numSpinOffs[0])+"#Y"+toString(".3",numSpinOffs[1])
        reply=reply+"#Z"+toString(".3",numSpinOffs[2])+"#RX"+toString(".1",numSpinOffs[3])
        reply=reply+"#RY"+toString(".1",numSpinOffs[4])+"#RZ"+toString(".1",numSpinOffs[5])
        call sendStatus(reply,sio_ID)
      break

      case "getSpinPosition"
        call getPosition("getSpinPosition",currentSpinPosJ,sio_ID)
      break

      case "getSpinHomePosition"
        call getPosition("getSpinHomePosition",spinnerHomePos,sio_ID)
      break

      case "getCurrentPosition"
        call getPosition("getCurrentPosition",herej(),sio_ID)
      break
      
      case "getNearestPosition"
        call getNearestPos(sio_ID)
      break
      
      case "setCalibInfo"
        // Sets calibration info string 
        msgLength = len(stringMessage)
        calibInfo = mid(stringMessage, (msgLength - 13), 13)
        call sendStatus("setCalibInfo:done", sio_ID)
      break
      
      case "getCalibInfo"
       reply = "getCalibInfo:" + calibInfo
       call sendStatus(reply,sio_ID)
      break

      case "setSpeed"
        taskCreate "setSpeed",5,setSpeed(stringMessage,sio_ID)
        wait(taskStatus("setSpeed")==-1)
      break

      case "getSpeed"
        call sendStatus("getSpeed:#"+toString("",mFastMov.vel),sio_ID)
      break

      case "powerOn"
        putln("Enabling robot power ...")
        taskCreate "powerSwitch",10,powerSwitch(true,"powerOn",sio_ID)
      break

      case "powerOff"
        putln("Disabling robot power ...")
        taskCreate "powerSwitch",10,powerSwitch(false,"powerOff",sio_ID)
      break

      case "getPowerState"
        putln("Get power status ...")
        if (isPowered()==false)
          reply="getPowerState:#Off"
        else
          reply="getPowerState:#On"
        endIf
        taskCreate "sendStatus",10,sendStatus(reply,sio_ID)
      break

      case "interrupt"
        putln("Interrupt movement ...")
        // Temporarily stops movement. This is basically a pause!\
        // Used by observeStop
        moveIsStopped=true
        call sendStatus("interrupt:done", sio_ID)
      break

      case "restart"
        putln("Restart from interruption ...")
        // Used by observeStop
        moveIsStopped=false
        call sendStatus("restart:done", sio_ID)
      break

      case "getGripperState"
        if switchGripper==true
          gripState="closed"
        else
          gripState="open"
        endIf
        call sendStatus("getGripperState:"+gripState,sio_ID)
      break

      // Movement routines
      // **********
      // Home position for the sample (sam)
      case "moveHome"
        putln("Moving to home ...")
        taskCreate "moveHome",10,moveManager(homePosition,mFastMov,"moveHome:done",sio_ID)
      break

      //Move to current sample offset position (home + offset)
      case "moveSamPos"
        putln("Moving to current sample ...")
        taskCreate "moveSamPos",10,moveManager(currentSamPosJ,mFastMov,"moveSamPos:done",sio_ID)
      break

      case "moveGate"
        putln("Moving to gate ...")
        taskCreate "moveGate",10,moveManager(gatePosition,mFastMov,"moveGate:done",sio_ID)
      break

      // Home position (calibrated) for the spinner
      case "moveSpinHome"
        putln("Moving to spinner home ...")
        taskCreate "moveSpinHome",10,moveManager(spinnerHomePos,mFastMov,"moveSpinHome:done",sio_ID)
      break

      //Move to current spinner offset position (spinnerHome + offset)
      case "moveSpinner"
        putln("Moving to spinner ...")
        taskCreate "moveSpinner",10,moveManager(currentSpinPosJ,mFastMov,"moveSpinner:done",sio_ID)
      break

      case "moveOffside"
        putln("Moving to offside ...")
        taskCreate "moveOffside",10,moveManager(parkingPosition,mFastMov,"moveOffside:done",sio_ID)
      break

      case "moveZero"
        putln("Moving to zero ...")
        taskCreate "moveZero",10,moveManager(zeroPosition,mFastMov,"moveZero:done",sio_ID)
      break

      case "moveBin"
        putln("Moving to bin ...")
        taskCreate "moveBin",10,moveManager(binPosition,mFastMov,"moveBin:done",sio_ID)
      break

      // Sample Handling
      // **********
      case "samplePick"
        putln("Picking sample ...")
        taskCreate "sampleGripping",10,sampleGripping(true,"samplePick",sio_ID)
      break

      case "sampleRelease"
        putln("Releasing sample ...")
        taskCreate "sampleGripping",10,sampleGripping(false,"sampleRelease",sio_ID)
      break

      case "gripperOpen"
        putln("Open gripper ...")
        switchGripper=false
        taskCreate "sendStatus",10,sendStatus("gripperOpen:done",sio_ID)
      break

      case "gripperClose"
        putln("Close gripper ...")
        switchGripper=true
        taskCreate "sendStatus",10,sendStatus("gripperClose:done",sio_ID)
      break
      
      case "isSampleMounted"
        // Check the state of the sample mounted flag
        if mounted == true
          reply = "isSampleMounted:#Yes"
        else
          reply = "isSampleMounted:#No"
        endIf
        call sendStatus(reply, sio_ID)
      break

      case "sampleMounted"
        // Set the sample mounted flag mounted (this is only s software flag)
        mounted = true
        taskCreate "sendStatus", 10, sendStatus("sampleMounted:done", sio_ID)
      break

      case "sampleUnmounted"
        // Set the sample mounted flag not mounted (this is only a software flag)
        mounted = false
        taskCreate "sendStatus", 10, sendStatus("sampleUnmounted:done", sio_ID)
      break

      default
        call sendStatus(":fail_'Unrecognised Command!'",sio_ID)
      break

    endSwitch
    // This message has been processed, so clear the stringMessage/command
    stringMessage=""
    command=""
    sio_ID=-1
    reply=""
    msgLength=0

  endWhile
end]]></Code>
  </Program>
</Programs>